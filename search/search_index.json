{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Welcome to fck-nat. The (f)easible (c)ost (k)onfigurable NAT! Overpaying for AWS Managed NAT Gateways? fck-nat. Want to use NAT instances and stay up-to-date with the latest security patches? fck-nat. Want to reuse your Bastion hosts as a NAT? fck-nat. fck-nat offers a ready-to-use ARM and x86 based AMIs built on Amazon Linux 2 which can support up to 5Gbps burst NAT traffic on a t4g.nano instance. How does that compare to a Managed NAT Gateway? Hourly rates: Managed NAT Gateway hourly: $0.045 t4g.nano hourly: $0.0042 Per GB rates: Managed NAT Gateway per GB: $0.045 fck-nat per GB: $0.00 Sitting idle, fck-nat costs 10% of a Managed NAT Gateway. In practice, the savings are even greater. \"But what about AWS' NAT Instance AMI?\" The official AWS supported NAT Instance AMI hasn't been updates since 2018, is still running Amazon Linux 1 which is now EOL, and has no ARM support, meaning it can't be deployed on EC2's most cost effective instance types. fck-nat. \"When would I want to use a Managed NAT Gateway instead of fck-nat?\" AWS limits outgoing internet bandwidth on EC2 instances to 5Gbps. This means that the highest bandwidth that fck-nat can support (while remaining cost-effective) is 5Gbps. This is enough to cover a very broad set of use cases, but if you need additional bandwidth, you should use Managed NAT Gateway. If AWS were to lift the limit on internet egress bandwidth from EC2, you could cost-effectively operate fck-nat at speeds up to 25Gbps, but you wouldn't need Managed NAT Gateway then would you? fck-nat. Read more about EC2 bandwidth limits here Additionally, if you have an allergy to non-managed services, fck-nat may not be for you. Although fck-nat supports a high-availability mode, it is not completely immune to outages (albeit very rare). If your workload requires five 9s of uptime, then Managed NAT Gateway is likely a better option for you. Using fck-nat The primary objective of fck-nat is to make deploying your own NAT instances as easy, secure, and configurable as possible. While fck-nat strives to provide out-of-the-box options and guides that work for most people, everyone's requirements are different. Where fck-nat can't provide a ready-to-use solution, we try to offer you all the toggles you need to get up and running yourself with as little headache as possible. We follow the \"batteries included, but swappable\" philosophy. Getting a fck-nat AMI fck-nat provides public AMIs in both arm64 and x86_64 flavors built on top of Amazon Linux 2. If you would rather use a different base image or host the AMI yourself, you can build your own AMI. The public fck-nat AMIs fck-nat currently provides public AMIs in most regions. You can see the full list in packer/fck-nat-public-all-regions.pkrvars.hcl . While arm64 images are the most cost effective, x86_64 images are also available. You can get view the available fck-nat AMIs with the following query: # Amazon Linux 2 based AMIs aws ec2 describe-images --owners 568608671756 --filters 'Name=name,Values=fck-nat-amzn2-*' Building your own fck-nat AMI fck-nat images are built using Packer . You can find the Packer files we use to build the public images inside the packer folder. Our Packer configuration uses variables extensively, allowing you to customize your base image, build region, architecture, etc. If the publicly available AMIs don't suit your needs, or you would prefer to host the AMIs yourself, you can create your own pkrvars.hcl file and build your own AMI. packer build -var-file = \"your-var-file.pkrvars.hcl\" ./packer/fck-nat.pkr.hcl Installing fck-nat from the RPM If you have an existing AMI and you want to install fck-nat on it, you can get the .rpm build of fck-nat from the Releases page. Using your fck-nat AMI An AMI isn't the only thing you'll need to get up and running with fck-nat. There's a few options which need to be configured in order to route traffic to your NAT. Namely, you must: Configure a security group for your fck-nat instance Disable source/destination checks Update your VPC route table Some tools can accomplish this for you, others cannot. Check the \"Deploying\" section for more information about deploying fck-nat with your favorite infrastructure-as-code tool.","title":"Introduction"},{"location":"#introduction","text":"Welcome to fck-nat. The (f)easible (c)ost (k)onfigurable NAT! Overpaying for AWS Managed NAT Gateways? fck-nat. Want to use NAT instances and stay up-to-date with the latest security patches? fck-nat. Want to reuse your Bastion hosts as a NAT? fck-nat. fck-nat offers a ready-to-use ARM and x86 based AMIs built on Amazon Linux 2 which can support up to 5Gbps burst NAT traffic on a t4g.nano instance. How does that compare to a Managed NAT Gateway? Hourly rates: Managed NAT Gateway hourly: $0.045 t4g.nano hourly: $0.0042 Per GB rates: Managed NAT Gateway per GB: $0.045 fck-nat per GB: $0.00 Sitting idle, fck-nat costs 10% of a Managed NAT Gateway. In practice, the savings are even greater. \"But what about AWS' NAT Instance AMI?\" The official AWS supported NAT Instance AMI hasn't been updates since 2018, is still running Amazon Linux 1 which is now EOL, and has no ARM support, meaning it can't be deployed on EC2's most cost effective instance types. fck-nat. \"When would I want to use a Managed NAT Gateway instead of fck-nat?\" AWS limits outgoing internet bandwidth on EC2 instances to 5Gbps. This means that the highest bandwidth that fck-nat can support (while remaining cost-effective) is 5Gbps. This is enough to cover a very broad set of use cases, but if you need additional bandwidth, you should use Managed NAT Gateway. If AWS were to lift the limit on internet egress bandwidth from EC2, you could cost-effectively operate fck-nat at speeds up to 25Gbps, but you wouldn't need Managed NAT Gateway then would you? fck-nat. Read more about EC2 bandwidth limits here Additionally, if you have an allergy to non-managed services, fck-nat may not be for you. Although fck-nat supports a high-availability mode, it is not completely immune to outages (albeit very rare). If your workload requires five 9s of uptime, then Managed NAT Gateway is likely a better option for you.","title":"Introduction"},{"location":"#using-fck-nat","text":"The primary objective of fck-nat is to make deploying your own NAT instances as easy, secure, and configurable as possible. While fck-nat strives to provide out-of-the-box options and guides that work for most people, everyone's requirements are different. Where fck-nat can't provide a ready-to-use solution, we try to offer you all the toggles you need to get up and running yourself with as little headache as possible. We follow the \"batteries included, but swappable\" philosophy.","title":"Using fck-nat"},{"location":"#getting-a-fck-nat-ami","text":"fck-nat provides public AMIs in both arm64 and x86_64 flavors built on top of Amazon Linux 2. If you would rather use a different base image or host the AMI yourself, you can build your own AMI.","title":"Getting a fck-nat AMI"},{"location":"#the-public-fck-nat-amis","text":"fck-nat currently provides public AMIs in most regions. You can see the full list in packer/fck-nat-public-all-regions.pkrvars.hcl . While arm64 images are the most cost effective, x86_64 images are also available. You can get view the available fck-nat AMIs with the following query: # Amazon Linux 2 based AMIs aws ec2 describe-images --owners 568608671756 --filters 'Name=name,Values=fck-nat-amzn2-*'","title":"The public fck-nat AMIs"},{"location":"#building-your-own-fck-nat-ami","text":"fck-nat images are built using Packer . You can find the Packer files we use to build the public images inside the packer folder. Our Packer configuration uses variables extensively, allowing you to customize your base image, build region, architecture, etc. If the publicly available AMIs don't suit your needs, or you would prefer to host the AMIs yourself, you can create your own pkrvars.hcl file and build your own AMI. packer build -var-file = \"your-var-file.pkrvars.hcl\" ./packer/fck-nat.pkr.hcl","title":"Building your own fck-nat AMI"},{"location":"#installing-fck-nat-from-the-rpm","text":"If you have an existing AMI and you want to install fck-nat on it, you can get the .rpm build of fck-nat from the Releases page.","title":"Installing fck-nat from the RPM"},{"location":"#using-your-fck-nat-ami","text":"An AMI isn't the only thing you'll need to get up and running with fck-nat. There's a few options which need to be configured in order to route traffic to your NAT. Namely, you must: Configure a security group for your fck-nat instance Disable source/destination checks Update your VPC route table Some tools can accomplish this for you, others cannot. Check the \"Deploying\" section for more information about deploying fck-nat with your favorite infrastructure-as-code tool.","title":"Using your fck-nat AMI"},{"location":"deploying/","text":"Deploying fck-nat The most well-supported way to deploy fck-nat with all of its features available out of the box is via CDK. If you're using another Infrastructure-as-code provider, you can still deploy a basic NAT instance with fck-nat, but it is more intensive to support some of fck-nat's additional features. Notably missing at the moment is a Terraform module. If you're using Terraform and would like to leverage fck-nat, please +1 this issue: Create a fck-nat Terraform module CDK fck-nat provides an official CDK module which supports all of fck-nat's features (namely high-availability mode) out-of-the-box. The CDK module is currently available both in Typescript and Python. You can find detailed documentation on Construct Hub . Here's an example use of the CDK construct in Typescript: const vpc = new Vpc ( this , 'vpc' , { natGatewayProvider : new FckNatInstanceProvider ({ instanceType : InstanceType.of ( InstanceClass . T4G , InstanceSize . MICRO ), }), }); That's it! This will deploy your VPC using fck-nat as your NAT provider in high availability mode. This includes all necessary routing configurations and deploys fck-nat in an Autoscaling group to ensure that a new instance is brought up automatically in case the NAT instance is terminated. You can also deploy fck-nat in non-HA mode using CDK's built-in NatInstanceProvider like so: const vpc = new Vpc ( this , 'vpc' , { natGatewayProvider : new NatInstanceProvider ({ instanceType : InstanceType.of ( InstanceClass . T4G , InstanceSize . MICRO ), machineImage : new LookupMachineImage ({ name : 'fck-nat-amzn2-*-arm64-ebs' , owners : [ '568608671756' ], }) }), }); Read more about the NatInstanceProvider construct Cloudformation For brevity, this document assumes you already have a VPC with public and private subnets defined in your Cloudformation template. This example template provisions the minimum resources required to connect fck-nat in your VPC. This template does not support high availability mode! A security group allowing ingress traffic from within the VPC and egress out to the internet An EC2 instance using the fck-nat AMI A route in the private subnet route table directing traffic to the fck-nat instance. This snippet assumes the following resources are already defined: VPC : An AWS::EC2::VPC resource. PublicSubnet : An AWS::EC2::Subnet which has an AWS::EC2::InternetGateway attached. PrivateSubnetRouteTable : An AWS::EC2::RouteTable with an AWS::EC2::SubnetRouteTableAssociation to a AWS::EC2::Subnet NatInstanceSecurityGroup : Type : AWS::EC2::SecurityGroup Properties : GroupDescription : \"fck-nat Security Group\" VpcId : !Ref VPC SecurityGroupIngress : - IpProtocol : tcp FromPort : 0 ToPort : 65535 CidrIp : !GetAtt VPC.CidrBlock SecurityGroupEgress : - IpProtocol : tcp FromPort : 0 ToPort : 65535 CidrIp : 0.0.0.0/0 NatInstance : Type : AWS::EC2::Instance Properties : # You can find the latest public AMI ID with the following command: # aws ec2 describe-images --owners 568608671756 --filters 'Name=name,Values=fck-nat-amzn2-*' ImageId : ami-005e79c34846da0a4 InstanceType : t4g.nano SourceDestCheck : false NetworkInterfaces : - AssociatePublicIpAddress : true SubnetId : !Ref PublicSubnet DeleteOnTermination : true DeviceIndex : 0 GroupSet : - !Ref NatInstanceSecurityGroup PrivateSubnetRoute : Type : AWS::EC2::Route DependsOn : NatInstance Properties : RouteTableId : !Ref PrivateSubnetRouteTable DestinationCidrBlock : 0.0.0.0/0 InstanceId : !Ref NatInstance","title":"Deploying"},{"location":"deploying/#deploying-fck-nat","text":"The most well-supported way to deploy fck-nat with all of its features available out of the box is via CDK. If you're using another Infrastructure-as-code provider, you can still deploy a basic NAT instance with fck-nat, but it is more intensive to support some of fck-nat's additional features. Notably missing at the moment is a Terraform module. If you're using Terraform and would like to leverage fck-nat, please +1 this issue: Create a fck-nat Terraform module","title":"Deploying fck-nat"},{"location":"deploying/#cdk","text":"fck-nat provides an official CDK module which supports all of fck-nat's features (namely high-availability mode) out-of-the-box. The CDK module is currently available both in Typescript and Python. You can find detailed documentation on Construct Hub . Here's an example use of the CDK construct in Typescript: const vpc = new Vpc ( this , 'vpc' , { natGatewayProvider : new FckNatInstanceProvider ({ instanceType : InstanceType.of ( InstanceClass . T4G , InstanceSize . MICRO ), }), }); That's it! This will deploy your VPC using fck-nat as your NAT provider in high availability mode. This includes all necessary routing configurations and deploys fck-nat in an Autoscaling group to ensure that a new instance is brought up automatically in case the NAT instance is terminated. You can also deploy fck-nat in non-HA mode using CDK's built-in NatInstanceProvider like so: const vpc = new Vpc ( this , 'vpc' , { natGatewayProvider : new NatInstanceProvider ({ instanceType : InstanceType.of ( InstanceClass . T4G , InstanceSize . MICRO ), machineImage : new LookupMachineImage ({ name : 'fck-nat-amzn2-*-arm64-ebs' , owners : [ '568608671756' ], }) }), }); Read more about the NatInstanceProvider construct","title":"CDK"},{"location":"deploying/#cloudformation","text":"For brevity, this document assumes you already have a VPC with public and private subnets defined in your Cloudformation template. This example template provisions the minimum resources required to connect fck-nat in your VPC. This template does not support high availability mode! A security group allowing ingress traffic from within the VPC and egress out to the internet An EC2 instance using the fck-nat AMI A route in the private subnet route table directing traffic to the fck-nat instance. This snippet assumes the following resources are already defined: VPC : An AWS::EC2::VPC resource. PublicSubnet : An AWS::EC2::Subnet which has an AWS::EC2::InternetGateway attached. PrivateSubnetRouteTable : An AWS::EC2::RouteTable with an AWS::EC2::SubnetRouteTableAssociation to a AWS::EC2::Subnet NatInstanceSecurityGroup : Type : AWS::EC2::SecurityGroup Properties : GroupDescription : \"fck-nat Security Group\" VpcId : !Ref VPC SecurityGroupIngress : - IpProtocol : tcp FromPort : 0 ToPort : 65535 CidrIp : !GetAtt VPC.CidrBlock SecurityGroupEgress : - IpProtocol : tcp FromPort : 0 ToPort : 65535 CidrIp : 0.0.0.0/0 NatInstance : Type : AWS::EC2::Instance Properties : # You can find the latest public AMI ID with the following command: # aws ec2 describe-images --owners 568608671756 --filters 'Name=name,Values=fck-nat-amzn2-*' ImageId : ami-005e79c34846da0a4 InstanceType : t4g.nano SourceDestCheck : false NetworkInterfaces : - AssociatePublicIpAddress : true SubnetId : !Ref PublicSubnet DeleteOnTermination : true DeviceIndex : 0 GroupSet : - !Ref NatInstanceSecurityGroup PrivateSubnetRoute : Type : AWS::EC2::Route DependsOn : NatInstance Properties : RouteTableId : !Ref PrivateSubnetRouteTable DestinationCidrBlock : 0.0.0.0/0 InstanceId : !Ref NatInstance","title":"Cloudformation"},{"location":"features/","text":"fck-nat Features High-availability Mode fck-nat can operate on a single instance, or withing an autoscaling group for improved availability. When running in an autoscaling group, fck-nat can be configured to always attach a specific ENI at start-up, allowing fck-nat to maintain a consistent internal-facing IP address. To enable this feature, you'll need to create a config file at /etc/fck-nat.conf like this: eni_id=<YOUR_ENI_ID> Once the fck-nat configuration is created, be sure to restart the service by running service fck-nat restart . In the official fck-nat CDK construct, we configure this via UserData on the autoscaling group. Metrics One of the objectives of fck-nat is to offer as close as possible metric parity with Managed NAT Gateway. If this feature is important to you, help us prioritize it by +1'ing the following issue: Report additional metrics from fck-nat","title":"Features"},{"location":"features/#fck-nat-features","text":"","title":"fck-nat Features"},{"location":"features/#high-availability-mode","text":"fck-nat can operate on a single instance, or withing an autoscaling group for improved availability. When running in an autoscaling group, fck-nat can be configured to always attach a specific ENI at start-up, allowing fck-nat to maintain a consistent internal-facing IP address. To enable this feature, you'll need to create a config file at /etc/fck-nat.conf like this: eni_id=<YOUR_ENI_ID> Once the fck-nat configuration is created, be sure to restart the service by running service fck-nat restart . In the official fck-nat CDK construct, we configure this via UserData on the autoscaling group.","title":"High-availability Mode"},{"location":"features/#metrics","text":"One of the objectives of fck-nat is to offer as close as possible metric parity with Managed NAT Gateway. If this feature is important to you, help us prioritize it by +1'ing the following issue: Report additional metrics from fck-nat","title":"Metrics"}]}